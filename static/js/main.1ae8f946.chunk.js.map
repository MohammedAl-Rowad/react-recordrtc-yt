{"version":3,"sources":["@UI/AppHeader/AppHeader.tsx","@UI/MainRecorder/MainRecorder.tsx","theme.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppHeader","theme","useTheme","as","flex","mb","padding","bg","colors","blue","color","align","size","memo","MainRecorder","useState","recorder","setRecorder","stream","setStream","videoBlob","setVideoUrlBlob","type","setType","startRecording","a","mediaDevices","navigator","getUserMedia","video","audio","getDisplayMedia","RecordRTCPromisesHandler","stopRecording","getBlob","blob","stop","spacing","p","display","justifyContent","flexDirection","m","aria-label","onClick","icon","FaCamera","disabled","FaVideoSlash","saveAs","Date","now","FaDownload","h","width","src","window","URL","createObjectURL","extendTheme","config","initialColorMode","useSystemColorMode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ae8f946.chunk.js","sourcesContent":["import React, { FC, memo } from 'react'\r\nimport { Flex, Heading, useTheme, Theme } from '@chakra-ui/react'\r\n\r\nconst AppHeader: FC = () => {\r\n  const theme: Theme = useTheme()\r\n\r\n  return (\r\n    <Flex\r\n      as=\"nav\"\r\n      flex=\"1\"\r\n      mb={4}\r\n      padding=\"1.5rem\"\r\n      bg={theme.colors.blue[700]}\r\n      color=\"white\"\r\n    >\r\n      <Flex align=\"center\">\r\n        <Heading size=\"md\">Recording Audio/screen/video</Heading>\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default memo(AppHeader)\r\n","import React, { FC, memo, useState } from 'react'\r\nimport {\r\n  Box,\r\n  Icon,\r\n  Theme,\r\n  Button,\r\n  useTheme,\r\n  SimpleGrid,\r\n  IconButton,\r\n} from '@chakra-ui/react'\r\nimport { FaVideoSlash, FaDownload, FaCamera } from 'react-icons/fa'\r\nimport 'video-react/dist/video-react.css'\r\n// @ts-ignore\r\nimport { Player } from 'video-react'\r\n// @ts-ignore\r\nimport RecordRTC, {\r\n  // @ts-ignore\r\n  RecordRTCPromisesHandler,\r\n} from 'recordrtc'\r\nimport { saveAs } from 'file-saver'\r\n\r\nconst MainRecorder: FC = () => {\r\n  const theme: Theme = useTheme()\r\n  const [recorder, setRecorder] = useState<RecordRTC | null>()\r\n  const [stream, setStream] = useState<MediaStream | null>()\r\n  const [videoBlob, setVideoUrlBlob] = useState<Blob | null>()\r\n  const [type, setType] = useState<'video' | 'screen'>('video')\r\n\r\n  const startRecording = async () => {\r\n    const mediaDevices = navigator.mediaDevices\r\n    const stream: MediaStream =\r\n      type === 'video'\r\n        ? await mediaDevices.getUserMedia({\r\n            video: true,\r\n            audio: true,\r\n          })\r\n        : await (mediaDevices as any).getDisplayMedia({\r\n            video: true,\r\n            audio: false,\r\n          })\r\n    const recorder: RecordRTC = new RecordRTCPromisesHandler(stream, {\r\n      type: 'video',\r\n    })\r\n\r\n    await recorder.startRecording()\r\n    setRecorder(recorder)\r\n    setStream(stream)\r\n    setVideoUrlBlob(null)\r\n  }\r\n\r\n  const stopRecording = async () => {\r\n    if (recorder) {\r\n      await recorder.stopRecording()\r\n      const blob: Blob = await recorder.getBlob()\r\n      ;(stream as any).stop()\r\n      setVideoUrlBlob(blob)\r\n      setStream(null)\r\n      setRecorder(null)\r\n    }\r\n  }\r\n\r\n  const downloadVideo = () => {\r\n    if (videoBlob) {\r\n      saveAs(videoBlob, `Video-${Date.now()}.webm`)\r\n    }\r\n  }\r\n\r\n  const changeType = () => {\r\n    if (type === 'screen') {\r\n      setType('video')\r\n    } else {\r\n      setType('screen')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <SimpleGrid spacing=\"5\" p=\"5\">\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"center\"\r\n        flexDirection={[\r\n          'column', // 0-30em\r\n          'row', // 30em-48em\r\n          'row', // 48em-62em\r\n          'row', // 62em+\r\n        ]}\r\n      >\r\n        <Button\r\n          m=\"1\"\r\n          bg={theme.colors.blue[600]}\r\n          size=\"lg\"\r\n          aria-label=\"start recording\"\r\n          color=\"white\"\r\n          onClick={changeType}\r\n        >\r\n          {type === 'screen' ? 'Record Screen' : 'Record Video'}\r\n        </Button>\r\n        <IconButton\r\n          m=\"1\"\r\n          bg={theme.colors.blue[600]}\r\n          size=\"lg\"\r\n          aria-label=\"start recording\"\r\n          color=\"white\"\r\n          onClick={startRecording}\r\n          icon={<Icon as={FaCamera} />}\r\n        />\r\n        <IconButton\r\n          m=\"1\"\r\n          bg={theme.colors.blue[600]}\r\n          size=\"lg\"\r\n          color=\"white\"\r\n          aria-label=\"stop recording\"\r\n          onClick={stopRecording}\r\n          disabled={recorder ? false : true}\r\n          icon={<Icon as={FaVideoSlash} />}\r\n        />\r\n        <IconButton\r\n          bg={theme.colors.blue[600]}\r\n          m=\"1\"\r\n          size=\"lg\"\r\n          disabled={!!!videoBlob}\r\n          color=\"white\"\r\n          onClick={downloadVideo}\r\n          aria-label=\"download video\"\r\n          icon={<Icon as={FaDownload} />}\r\n        />\r\n      </Box>\r\n      <Box display=\"flex\" justifyContent=\"center\">\r\n        <Box\r\n          bg={!!videoBlob ? 'inherit' : 'blue.50'}\r\n          h=\"50vh\"\r\n          width={[\r\n            '100%', // 0-30em\r\n            '100%', // 30em-48em\r\n            '50vw', // 48em-62em\r\n            '50vw', // 62em+\r\n          ]}\r\n        >\r\n          {!!videoBlob && (\r\n            <Player src={window.URL.createObjectURL(videoBlob)} />\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    </SimpleGrid>\r\n  )\r\n}\r\n\r\nexport default memo(MainRecorder)\r\n","// theme.js\r\n// 1. import `extendTheme` function\r\nimport { extendTheme, ThemeConfig, Theme } from '@chakra-ui/react'\r\n// 2. Add your color mode config\r\nconst config: ThemeConfig = {\r\n  initialColorMode: 'dark',\r\n  useSystemColorMode: false,\r\n}\r\n// 3. extend the theme\r\nconst theme: Theme = extendTheme({ config })\r\n\r\nexport default theme\r\n","import React, { FC } from 'react'\r\nimport { ChakraProvider } from '@chakra-ui/react'\r\nimport { AppHeader, MainRecorder } from '@UI'\r\nimport theme from './theme'\r\n\r\nconst App: FC = () => {\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n      <AppHeader />\r\n      <MainRecorder />\r\n    </ChakraProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}